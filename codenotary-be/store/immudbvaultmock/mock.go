// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/store.go

// Package immudbvaultmock is a generated GoMock package.
package immudbvaultmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	store "github.com/tomaszkoziara/codenotarybe/store"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAccountingInfo mocks base method.
func (m *MockStore) GetAccountingInfo(ctx context.Context, id string) (store.AccountingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingInfo", ctx, id)
	ret0, _ := ret[0].(store.AccountingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountingInfo indicates an expected call of GetAccountingInfo.
func (mr *MockStoreMockRecorder) GetAccountingInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingInfo", reflect.TypeOf((*MockStore)(nil).GetAccountingInfo), ctx, id)
}

// ListAccountingInfo mocks base method.
func (m *MockStore) ListAccountingInfo(ctx context.Context, accountName string, page, pageSize int) ([]store.AccountingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountingInfo", ctx, accountName, page, pageSize)
	ret0, _ := ret[0].([]store.AccountingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountingInfo indicates an expected call of ListAccountingInfo.
func (mr *MockStoreMockRecorder) ListAccountingInfo(ctx, accountName, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountingInfo", reflect.TypeOf((*MockStore)(nil).ListAccountingInfo), ctx, accountName, page, pageSize)
}

// StoreAccountingInfo mocks base method.
func (m *MockStore) StoreAccountingInfo(ctx context.Context, accInfo store.AccountingInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccountingInfo", ctx, accInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAccountingInfo indicates an expected call of StoreAccountingInfo.
func (mr *MockStoreMockRecorder) StoreAccountingInfo(ctx, accInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccountingInfo", reflect.TypeOf((*MockStore)(nil).StoreAccountingInfo), ctx, accInfo)
}
